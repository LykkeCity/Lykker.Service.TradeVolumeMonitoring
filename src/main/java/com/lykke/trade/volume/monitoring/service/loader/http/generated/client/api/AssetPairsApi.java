/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lykke.trade.volume.monitoring.service.loader.http.generated.client.api;

import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiCallback;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiClient;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiException;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiResponse;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.Configuration;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.Pair;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ProgressRequestBody;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.model.ApiAssetPair;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.model.ApiAssetPairHistoryRateModel;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.model.ApiAssetPairRateModel;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.model.ApiError;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.model.AssetPairRateHistoryRequest;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.model.AssetPairsRateHistoryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssetPairsApi {
    private ApiClient apiClient;

    public AssetPairsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetPairsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiAssetPairsDictionaryByMarketGet
     * @param market  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiAssetPairsDictionaryByMarketGetCall(String market, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AssetPairs/dictionary/{market}"
            .replaceAll("\\{" + "market" + "\\}", apiClient.escapeString(market.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiAssetPairsDictionaryByMarketGetValidateBeforeCall(String market, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling apiAssetPairsDictionaryByMarketGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiAssetPairsDictionaryByMarketGetCall(market, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get asset pairs dictionary
     * 
     * @param market  (required)
     * @return List&lt;ApiAssetPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ApiAssetPair> apiAssetPairsDictionaryByMarketGet(String market) throws ApiException {
        ApiResponse<List<ApiAssetPair>> resp = apiAssetPairsDictionaryByMarketGetWithHttpInfo(market);
        return resp.getData();
    }

    /**
     * Get asset pairs dictionary
     * 
     * @param market  (required)
     * @return ApiResponse&lt;List&lt;ApiAssetPair&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ApiAssetPair>> apiAssetPairsDictionaryByMarketGetWithHttpInfo(String market) throws ApiException {
        com.squareup.okhttp.Call call = apiAssetPairsDictionaryByMarketGetValidateBeforeCall(market, null, null);
        Type localVarReturnType = new TypeToken<List<ApiAssetPair>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get asset pairs dictionary (asynchronously)
     * 
     * @param market  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiAssetPairsDictionaryByMarketGetAsync(String market, final ApiCallback<List<ApiAssetPair>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiAssetPairsDictionaryByMarketGetValidateBeforeCall(market, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ApiAssetPair>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiAssetPairsRateByAssetPairIdGet
     * @param assetPairId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiAssetPairsRateByAssetPairIdGetCall(String assetPairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AssetPairs/rate/{assetPairId}"
            .replaceAll("\\{" + "assetPairId" + "\\}", apiClient.escapeString(assetPairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiAssetPairsRateByAssetPairIdGetValidateBeforeCall(String assetPairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'assetPairId' is set
        if (assetPairId == null) {
            throw new ApiException("Missing the required parameter 'assetPairId' when calling apiAssetPairsRateByAssetPairIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiAssetPairsRateByAssetPairIdGetCall(assetPairId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get rates for asset pair
     * 
     * @param assetPairId  (required)
     * @return ApiAssetPairRateModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiAssetPairRateModel apiAssetPairsRateByAssetPairIdGet(String assetPairId) throws ApiException {
        ApiResponse<ApiAssetPairRateModel> resp = apiAssetPairsRateByAssetPairIdGetWithHttpInfo(assetPairId);
        return resp.getData();
    }

    /**
     * Get rates for asset pair
     * 
     * @param assetPairId  (required)
     * @return ApiResponse&lt;ApiAssetPairRateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiAssetPairRateModel> apiAssetPairsRateByAssetPairIdGetWithHttpInfo(String assetPairId) throws ApiException {
        com.squareup.okhttp.Call call = apiAssetPairsRateByAssetPairIdGetValidateBeforeCall(assetPairId, null, null);
        Type localVarReturnType = new TypeToken<ApiAssetPairRateModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get rates for asset pair (asynchronously)
     * 
     * @param assetPairId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiAssetPairsRateByAssetPairIdGetAsync(String assetPairId, final ApiCallback<ApiAssetPairRateModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiAssetPairsRateByAssetPairIdGetValidateBeforeCall(assetPairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiAssetPairRateModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiAssetPairsRateGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiAssetPairsRateGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AssetPairs/rate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiAssetPairsRateGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = apiAssetPairsRateGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all asset pairs rates
     * 
     * @return List&lt;ApiAssetPairRateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ApiAssetPairRateModel> apiAssetPairsRateGet() throws ApiException {
        ApiResponse<List<ApiAssetPairRateModel>> resp = apiAssetPairsRateGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all asset pairs rates
     * 
     * @return ApiResponse&lt;List&lt;ApiAssetPairRateModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ApiAssetPairRateModel>> apiAssetPairsRateGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = apiAssetPairsRateGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ApiAssetPairRateModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all asset pairs rates (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiAssetPairsRateGetAsync(final ApiCallback<List<ApiAssetPairRateModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiAssetPairsRateGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ApiAssetPairRateModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiAssetPairsRateHistoryByAssetPairIdPost
     * @param assetPairId Asset pair Id (required)
     * @param request Request model (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiAssetPairsRateHistoryByAssetPairIdPostCall(String assetPairId, AssetPairRateHistoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/AssetPairs/rate/history/{assetPairId}"
            .replaceAll("\\{" + "assetPairId" + "\\}", apiClient.escapeString(assetPairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiAssetPairsRateHistoryByAssetPairIdPostValidateBeforeCall(String assetPairId, AssetPairRateHistoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'assetPairId' is set
        if (assetPairId == null) {
            throw new ApiException("Missing the required parameter 'assetPairId' when calling apiAssetPairsRateHistoryByAssetPairIdPost(Async)");
        }
        

        com.squareup.okhttp.Call call = apiAssetPairsRateHistoryByAssetPairIdPostCall(assetPairId, request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get rates for specified period and asset pair
     * Available period values         \&quot;Sec\&quot;,      \&quot;Minute\&quot;,      \&quot;Hour\&quot;,      \&quot;Day\&quot;,      \&quot;Month\&quot;,
     * @param assetPairId Asset pair Id (required)
     * @param request Request model (optional)
     * @return ApiAssetPairHistoryRateModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiAssetPairHistoryRateModel apiAssetPairsRateHistoryByAssetPairIdPost(String assetPairId, AssetPairRateHistoryRequest request) throws ApiException {
        ApiResponse<ApiAssetPairHistoryRateModel> resp = apiAssetPairsRateHistoryByAssetPairIdPostWithHttpInfo(assetPairId, request);
        return resp.getData();
    }

    /**
     * Get rates for specified period and asset pair
     * Available period values         \&quot;Sec\&quot;,      \&quot;Minute\&quot;,      \&quot;Hour\&quot;,      \&quot;Day\&quot;,      \&quot;Month\&quot;,
     * @param assetPairId Asset pair Id (required)
     * @param request Request model (optional)
     * @return ApiResponse&lt;ApiAssetPairHistoryRateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiAssetPairHistoryRateModel> apiAssetPairsRateHistoryByAssetPairIdPostWithHttpInfo(String assetPairId, AssetPairRateHistoryRequest request) throws ApiException {
        com.squareup.okhttp.Call call = apiAssetPairsRateHistoryByAssetPairIdPostValidateBeforeCall(assetPairId, request, null, null);
        Type localVarReturnType = new TypeToken<ApiAssetPairHistoryRateModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get rates for specified period and asset pair (asynchronously)
     * Available period values         \&quot;Sec\&quot;,      \&quot;Minute\&quot;,      \&quot;Hour\&quot;,      \&quot;Day\&quot;,      \&quot;Month\&quot;,
     * @param assetPairId Asset pair Id (required)
     * @param request Request model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiAssetPairsRateHistoryByAssetPairIdPostAsync(String assetPairId, AssetPairRateHistoryRequest request, final ApiCallback<ApiAssetPairHistoryRateModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiAssetPairsRateHistoryByAssetPairIdPostValidateBeforeCall(assetPairId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiAssetPairHistoryRateModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiAssetPairsRateHistoryPost
     * @param request  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiAssetPairsRateHistoryPostCall(AssetPairsRateHistoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/AssetPairs/rate/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiAssetPairsRateHistoryPostValidateBeforeCall(AssetPairsRateHistoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = apiAssetPairsRateHistoryPostCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get rates for specified period
     * Available period values         \&quot;Sec\&quot;,      \&quot;Minute\&quot;,      \&quot;Hour\&quot;,      \&quot;Day\&quot;,      \&quot;Month\&quot;,
     * @param request  (optional)
     * @return List&lt;ApiAssetPairRateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ApiAssetPairRateModel> apiAssetPairsRateHistoryPost(AssetPairsRateHistoryRequest request) throws ApiException {
        ApiResponse<List<ApiAssetPairRateModel>> resp = apiAssetPairsRateHistoryPostWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Get rates for specified period
     * Available period values         \&quot;Sec\&quot;,      \&quot;Minute\&quot;,      \&quot;Hour\&quot;,      \&quot;Day\&quot;,      \&quot;Month\&quot;,
     * @param request  (optional)
     * @return ApiResponse&lt;List&lt;ApiAssetPairRateModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ApiAssetPairRateModel>> apiAssetPairsRateHistoryPostWithHttpInfo(AssetPairsRateHistoryRequest request) throws ApiException {
        com.squareup.okhttp.Call call = apiAssetPairsRateHistoryPostValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<List<ApiAssetPairRateModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get rates for specified period (asynchronously)
     * Available period values         \&quot;Sec\&quot;,      \&quot;Minute\&quot;,      \&quot;Hour\&quot;,      \&quot;Day\&quot;,      \&quot;Month\&quot;,
     * @param request  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiAssetPairsRateHistoryPostAsync(AssetPairsRateHistoryRequest request, final ApiCallback<List<ApiAssetPairRateModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiAssetPairsRateHistoryPostValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ApiAssetPairRateModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
