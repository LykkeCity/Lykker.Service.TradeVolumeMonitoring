/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lykke.trade.volume.monitoring.service.loader.http.generated.client.api;

import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiCallback;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiClient;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiException;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiResponse;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.Configuration;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.Pair;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ProgressRequestBody;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.model.ApiError;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.model.CandlesHistoryRequest;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.model.CandlesHistoryResponseApiCandle;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.model.CandlesHistoryResponseApiCandle2;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CandlesApi {
    private ApiClient apiClient;

    public CandlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CandlesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiCandlesHistoryByAssetPairIdByMarketPost
     * @param assetPairId Asset pair Id (required)
     * @param market Market type (required)
     * @param request Request model (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call apiCandlesHistoryByAssetPairIdByMarketPostCall(String assetPairId, String market, CandlesHistoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/Candles/history/{assetPairId}/{market}"
            .replaceAll("\\{" + "assetPairId" + "\\}", apiClient.escapeString(assetPairId.toString()))
            .replaceAll("\\{" + "market" + "\\}", apiClient.escapeString(market.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiCandlesHistoryByAssetPairIdByMarketPostValidateBeforeCall(String assetPairId, String market, CandlesHistoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'assetPairId' is set
        if (assetPairId == null) {
            throw new ApiException("Missing the required parameter 'assetPairId' when calling apiCandlesHistoryByAssetPairIdByMarketPost(Async)");
        }
        
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling apiCandlesHistoryByAssetPairIdByMarketPost(Async)");
        }
        

        com.squareup.okhttp.Call call = apiCandlesHistoryByAssetPairIdByMarketPostCall(assetPairId, market, request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [Obsolete] Get candles for specified period and asset pair. Please, use the -GET- api/history/{market}/{assetPair}/{period}/{type}/{from}/{to} method instead of this.
     * Available markets      Spot,      Mt  Available period values      Sec,      Minute,      Min5,      Min15,      Min30,      Hour,      Hour4,      Hour6,      Hour12,      Day,      Week,      Month
     * @param assetPairId Asset pair Id (required)
     * @param market Market type (required)
     * @param request Request model (optional)
     * @return CandlesHistoryResponseApiCandle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public CandlesHistoryResponseApiCandle apiCandlesHistoryByAssetPairIdByMarketPost(String assetPairId, String market, CandlesHistoryRequest request) throws ApiException {
        ApiResponse<CandlesHistoryResponseApiCandle> resp = apiCandlesHistoryByAssetPairIdByMarketPostWithHttpInfo(assetPairId, market, request);
        return resp.getData();
    }

    /**
     * [Obsolete] Get candles for specified period and asset pair. Please, use the -GET- api/history/{market}/{assetPair}/{period}/{type}/{from}/{to} method instead of this.
     * Available markets      Spot,      Mt  Available period values      Sec,      Minute,      Min5,      Min15,      Min30,      Hour,      Hour4,      Hour6,      Hour12,      Day,      Week,      Month
     * @param assetPairId Asset pair Id (required)
     * @param market Market type (required)
     * @param request Request model (optional)
     * @return ApiResponse&lt;CandlesHistoryResponseApiCandle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CandlesHistoryResponseApiCandle> apiCandlesHistoryByAssetPairIdByMarketPostWithHttpInfo(String assetPairId, String market, CandlesHistoryRequest request) throws ApiException {
        com.squareup.okhttp.Call call = apiCandlesHistoryByAssetPairIdByMarketPostValidateBeforeCall(assetPairId, market, request, null, null);
        Type localVarReturnType = new TypeToken<CandlesHistoryResponseApiCandle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [Obsolete] Get candles for specified period and asset pair. Please, use the -GET- api/history/{market}/{assetPair}/{period}/{type}/{from}/{to} method instead of this. (asynchronously)
     * Available markets      Spot,      Mt  Available period values      Sec,      Minute,      Min5,      Min15,      Min30,      Hour,      Hour4,      Hour6,      Hour12,      Day,      Week,      Month
     * @param assetPairId Asset pair Id (required)
     * @param market Market type (required)
     * @param request Request model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call apiCandlesHistoryByAssetPairIdByMarketPostAsync(String assetPairId, String market, CandlesHistoryRequest request, final ApiCallback<CandlesHistoryResponseApiCandle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiCandlesHistoryByAssetPairIdByMarketPostValidateBeforeCall(assetPairId, market, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandlesHistoryResponseApiCandle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiCandlesHistoryByMarketAvailableGet
     * @param market The market type. Acceptable values: Spot, Mt. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiCandlesHistoryByMarketAvailableGetCall(String market, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Candles/history/{market}/available"
            .replaceAll("\\{" + "market" + "\\}", apiClient.escapeString(market.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiCandlesHistoryByMarketAvailableGetValidateBeforeCall(String market, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling apiCandlesHistoryByMarketAvailableGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiCandlesHistoryByMarketAvailableGetCall(market, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of supported asset pairs for the given market type.
     * 
     * @param market The market type. Acceptable values: Spot, Mt. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> apiCandlesHistoryByMarketAvailableGet(String market) throws ApiException {
        ApiResponse<List<String>> resp = apiCandlesHistoryByMarketAvailableGetWithHttpInfo(market);
        return resp.getData();
    }

    /**
     * Get list of supported asset pairs for the given market type.
     * 
     * @param market The market type. Acceptable values: Spot, Mt. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> apiCandlesHistoryByMarketAvailableGetWithHttpInfo(String market) throws ApiException {
        com.squareup.okhttp.Call call = apiCandlesHistoryByMarketAvailableGetValidateBeforeCall(market, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of supported asset pairs for the given market type. (asynchronously)
     * 
     * @param market The market type. Acceptable values: Spot, Mt. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiCandlesHistoryByMarketAvailableGetAsync(String market, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiCandlesHistoryByMarketAvailableGetValidateBeforeCall(market, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGet
     * @param market The market type. Acceptable values: Spot, Mt. (required)
     * @param assetPair The asset pair Id. (required)
     * @param period The time period. Acceptable values: Sec, Minute, Min5, Min15, Min30, Hour, Hour4, Hour6, Hour12, Day, Week, Month. (required)
     * @param type The price type. Acceptable values: Bid, Ask, Mid, Trades. (required)
     * @param from The request&#39;s starting date and time. (required)
     * @param to The request&#39;s finishing date and time. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGetCall(String market, String assetPair, String period, String type, OffsetDateTime from, OffsetDateTime to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Candles/history/{market}/{assetPair}/{period}/{type}/{from}/{to}"
            .replaceAll("\\{" + "market" + "\\}", apiClient.escapeString(market.toString()))
            .replaceAll("\\{" + "assetPair" + "\\}", apiClient.escapeString(assetPair.toString()))
            .replaceAll("\\{" + "period" + "\\}", apiClient.escapeString(period.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "from" + "\\}", apiClient.escapeString(from.toString()))
            .replaceAll("\\{" + "to" + "\\}", apiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGetValidateBeforeCall(String market, String assetPair, String period, String type, OffsetDateTime from, OffsetDateTime to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGet(Async)");
        }
        
        // verify the required parameter 'assetPair' is set
        if (assetPair == null) {
            throw new ApiException("Missing the required parameter 'assetPair' when calling apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGet(Async)");
        }
        
        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGet(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGet(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGet(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGetCall(market, assetPair, period, type, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get candles for specified period and asset pair
     * 
     * @param market The market type. Acceptable values: Spot, Mt. (required)
     * @param assetPair The asset pair Id. (required)
     * @param period The time period. Acceptable values: Sec, Minute, Min5, Min15, Min30, Hour, Hour4, Hour6, Hour12, Day, Week, Month. (required)
     * @param type The price type. Acceptable values: Bid, Ask, Mid, Trades. (required)
     * @param from The request&#39;s starting date and time. (required)
     * @param to The request&#39;s finishing date and time. (required)
     * @return CandlesHistoryResponseApiCandle2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandlesHistoryResponseApiCandle2 apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGet(String market, String assetPair, String period, String type, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        ApiResponse<CandlesHistoryResponseApiCandle2> resp = apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGetWithHttpInfo(market, assetPair, period, type, from, to);
        return resp.getData();
    }

    /**
     * Get candles for specified period and asset pair
     * 
     * @param market The market type. Acceptable values: Spot, Mt. (required)
     * @param assetPair The asset pair Id. (required)
     * @param period The time period. Acceptable values: Sec, Minute, Min5, Min15, Min30, Hour, Hour4, Hour6, Hour12, Day, Week, Month. (required)
     * @param type The price type. Acceptable values: Bid, Ask, Mid, Trades. (required)
     * @param from The request&#39;s starting date and time. (required)
     * @param to The request&#39;s finishing date and time. (required)
     * @return ApiResponse&lt;CandlesHistoryResponseApiCandle2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandlesHistoryResponseApiCandle2> apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGetWithHttpInfo(String market, String assetPair, String period, String type, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        com.squareup.okhttp.Call call = apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGetValidateBeforeCall(market, assetPair, period, type, from, to, null, null);
        Type localVarReturnType = new TypeToken<CandlesHistoryResponseApiCandle2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get candles for specified period and asset pair (asynchronously)
     * 
     * @param market The market type. Acceptable values: Spot, Mt. (required)
     * @param assetPair The asset pair Id. (required)
     * @param period The time period. Acceptable values: Sec, Minute, Min5, Min15, Min30, Hour, Hour4, Hour6, Hour12, Day, Week, Month. (required)
     * @param type The price type. Acceptable values: Bid, Ask, Mid, Trades. (required)
     * @param from The request&#39;s starting date and time. (required)
     * @param to The request&#39;s finishing date and time. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGetAsync(String market, String assetPair, String period, String type, OffsetDateTime from, OffsetDateTime to, final ApiCallback<CandlesHistoryResponseApiCandle2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiCandlesHistoryByMarketByAssetPairByPeriodByTypeByFromByToGetValidateBeforeCall(market, assetPair, period, type, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandlesHistoryResponseApiCandle2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
