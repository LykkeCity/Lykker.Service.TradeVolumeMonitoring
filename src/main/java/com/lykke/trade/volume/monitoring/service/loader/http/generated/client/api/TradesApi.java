/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lykke.trade.volume.monitoring.service.loader.http.generated.client.api;

import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiCallback;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiClient;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiException;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ApiResponse;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.Configuration;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.Pair;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ProgressRequestBody;
import com.lykke.trade.volume.monitoring.service.loader.http.generated.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TradesApi {
    private ApiClient apiClient;

    public TradesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TradesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiTradesByAssetPairIdGet
     * @param assetPairId Id of asset pair (required)
     * @param skip How many items to skip (optional)
     * @param take How many items to take (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiTradesByAssetPairIdGetCall(String assetPairId, Integer skip, Integer take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Trades/{assetPairId}"
            .replaceAll("\\{" + "assetPairId" + "\\}", apiClient.escapeString(assetPairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiTradesByAssetPairIdGetValidateBeforeCall(String assetPairId, Integer skip, Integer take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'assetPairId' is set
        if (assetPairId == null) {
            throw new ApiException("Missing the required parameter 'assetPairId' when calling apiTradesByAssetPairIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiTradesByAssetPairIdGetCall(assetPairId, skip, take, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Provides latest trades for given asset pair
     * 
     * @param assetPairId Id of asset pair (required)
     * @param skip How many items to skip (optional)
     * @param take How many items to take (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiTradesByAssetPairIdGet(String assetPairId, Integer skip, Integer take) throws ApiException {
        apiTradesByAssetPairIdGetWithHttpInfo(assetPairId, skip, take);
    }

    /**
     * Provides latest trades for given asset pair
     * 
     * @param assetPairId Id of asset pair (required)
     * @param skip How many items to skip (optional)
     * @param take How many items to take (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiTradesByAssetPairIdGetWithHttpInfo(String assetPairId, Integer skip, Integer take) throws ApiException {
        com.squareup.okhttp.Call call = apiTradesByAssetPairIdGetValidateBeforeCall(assetPairId, skip, take, null, null);
        return apiClient.execute(call);
    }

    /**
     * Provides latest trades for given asset pair (asynchronously)
     * 
     * @param assetPairId Id of asset pair (required)
     * @param skip How many items to skip (optional)
     * @param take How many items to take (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiTradesByAssetPairIdGetAsync(String assetPairId, Integer skip, Integer take, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiTradesByAssetPairIdGetValidateBeforeCall(assetPairId, skip, take, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiTradesLastByAssetPairByNGet
     * @param assetPair  (required)
     * @param n  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiTradesLastByAssetPairByNGetCall(String assetPair, Integer n, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Trades/Last/{assetPair}/{n}"
            .replaceAll("\\{" + "assetPair" + "\\}", apiClient.escapeString(assetPair.toString()))
            .replaceAll("\\{" + "n" + "\\}", apiClient.escapeString(n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiTradesLastByAssetPairByNGetValidateBeforeCall(String assetPair, Integer n, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'assetPair' is set
        if (assetPair == null) {
            throw new ApiException("Missing the required parameter 'assetPair' when calling apiTradesLastByAssetPairByNGet(Async)");
        }
        
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling apiTradesLastByAssetPairByNGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiTradesLastByAssetPairByNGetCall(assetPair, n, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get trade volumes for all available assetpairs
     * 
     * @param assetPair  (required)
     * @param n  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiTradesLastByAssetPairByNGet(String assetPair, Integer n) throws ApiException {
        apiTradesLastByAssetPairByNGetWithHttpInfo(assetPair, n);
    }

    /**
     * Get trade volumes for all available assetpairs
     * 
     * @param assetPair  (required)
     * @param n  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiTradesLastByAssetPairByNGetWithHttpInfo(String assetPair, Integer n) throws ApiException {
        com.squareup.okhttp.Call call = apiTradesLastByAssetPairByNGetValidateBeforeCall(assetPair, n, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get trade volumes for all available assetpairs (asynchronously)
     * 
     * @param assetPair  (required)
     * @param n  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiTradesLastByAssetPairByNGetAsync(String assetPair, Integer n, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiTradesLastByAssetPairByNGetValidateBeforeCall(assetPair, n, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
